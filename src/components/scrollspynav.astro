---
// Define sections for the index page scroll spy
const sections = [
  { id: 'safety', label: 'Safety' },
  { id: 'importance', label: 'Importance' },
  { id: 'clarity', label: 'Clarity' },
  { id: 'comfort', label: 'Comfort' },
  { id: 'practicality', label: 'Practicality' },
];
---

<nav class="fixed right-4 top-1/2 transform -translate-y-1/2 z-40 hidden md:block" aria-label="Page Sections">
  <ul class="space-y-3">
    {sections.map((section) => (
      <li>
        <a
          href={`#${section.id}`}
          class="scroll-spy-dot block w-3 h-3 bg-gray-300 rounded-full transition-transform duration-200 hover:bg-blue-500 scale-100"
          data-section-id={section.id}
          aria-label={`Go to ${section.label} section`}
          title={section.label} 
        >
          <span class="sr-only">{section.label}</span>
        </a>
      </li>
    ))}
  </ul>
</nav>

<script is:inline>
  // is:inline needed for script to run on client
  document.addEventListener('DOMContentLoaded', () => {
    const dots = document.querySelectorAll('.scroll-spy-dot');
    const sections = Array.from(dots).map(dot => {
      const sectionId = dot.getAttribute('data-section-id');
      // Ensure sections actually exist on the current page
      return document.getElementById(sectionId);
    }).filter(section => section !== null); 

    if (sections.length === 0) return; // Don't run if no relevant sections on this page

    const updateActiveDot = () => {
      let currentSectionId = null;
      const offset = window.innerHeight * 0.5; // Activate when section top reaches ~mid screen

      sections.forEach((section) => {
        if (section.offsetTop <= window.scrollY + offset) {
          currentSectionId = section.id;
        }
      });

       // Handle edge case: if scrolled near bottom, last section should be active
       if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 20) { // Near bottom
          currentSectionId = sections[sections.length - 1]?.id ?? currentSectionId;
       }

      dots.forEach(dot => {
        dot.classList.remove('active-dot', 'bg-blue-600', 'scale-125');
        dot.classList.add('bg-gray-300');
      });

      if (currentSectionId) {
        const activeDot = document.querySelector(`.scroll-spy-dot[data-section-id="${currentSectionId}"]`);
        if (activeDot) {
          activeDot.classList.add('active-dot', 'bg-blue-600', 'scale-125'); 
          activeDot.classList.remove('bg-gray-300'); 
        }
      }
    };

    let scrollTimeout;
    const debouncedScrollHandler = () => {
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(updateActiveDot, 50); 
    };

    window.addEventListener('scroll', debouncedScrollHandler);
    updateActiveDot(); // Initial check

    dots.forEach(dot => {
      dot.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = dot.getAttribute('data-section-id');
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
          const navbar = document.querySelector('header'); // Assuming header is the sticky nav
          const navbarHeight = navbar ? navbar.offsetHeight : 0; 
          const targetPosition = targetElement.offsetTop - navbarHeight - 20; // Offset below navbar
          
          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });

          // Manually update active dot immediately for better UX
          dots.forEach(d => {
             d.classList.remove('active-dot', 'bg-blue-600', 'scale-125');
             d.classList.add('bg-gray-300');
          });
          dot.classList.add('active-dot', 'bg-blue-600', 'scale-125');
          dot.classList.remove('bg-gray-300');
        }
      });
    });
  });
</script>
